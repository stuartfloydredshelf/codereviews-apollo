import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface AcceptInboundCrossClusterSearchConnectionRequest {
    
    CrossClusterSearchConnectionId: string | undefined;
}
export declare namespace AcceptInboundCrossClusterSearchConnectionRequest {
    
    const filterSensitiveLog: (obj: AcceptInboundCrossClusterSearchConnectionRequest) => any;
}
export declare enum InboundCrossClusterSearchConnectionStatusCode {
    APPROVED = "APPROVED",
    DELETED = "DELETED",
    DELETING = "DELETING",
    PENDING_ACCEPTANCE = "PENDING_ACCEPTANCE",
    REJECTED = "REJECTED",
    REJECTING = "REJECTING"
}

export interface InboundCrossClusterSearchConnectionStatus {
    
    StatusCode?: InboundCrossClusterSearchConnectionStatusCode | string;
    
    Message?: string;
}
export declare namespace InboundCrossClusterSearchConnectionStatus {
    
    const filterSensitiveLog: (obj: InboundCrossClusterSearchConnectionStatus) => any;
}
export interface DomainInformation {
    OwnerId?: string;
    
    DomainName: string | undefined;
    Region?: string;
}
export declare namespace DomainInformation {
    
    const filterSensitiveLog: (obj: DomainInformation) => any;
}

export interface InboundCrossClusterSearchConnection {
    
    SourceDomainInfo?: DomainInformation;
    
    DestinationDomainInfo?: DomainInformation;
    
    CrossClusterSearchConnectionId?: string;
    
    ConnectionStatus?: InboundCrossClusterSearchConnectionStatus;
}
export declare namespace InboundCrossClusterSearchConnection {
    
    const filterSensitiveLog: (obj: InboundCrossClusterSearchConnection) => any;
}

export interface AcceptInboundCrossClusterSearchConnectionResponse {
    
    CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
}
export declare namespace AcceptInboundCrossClusterSearchConnectionResponse {
    
    const filterSensitiveLog: (obj: AcceptInboundCrossClusterSearchConnectionResponse) => any;
}

export interface DisabledOperationException extends __SmithyException, $MetadataBearer {
    name: "DisabledOperationException";
    $fault: "client";
    
    message?: string;
}
export declare namespace DisabledOperationException {
    
    const filterSensitiveLog: (obj: DisabledOperationException) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    
    message?: string;
}
export declare namespace LimitExceededException {
    
    const filterSensitiveLog: (obj: LimitExceededException) => any;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    
    message?: string;
}
export declare namespace ResourceNotFoundException {
    
    const filterSensitiveLog: (obj: ResourceNotFoundException) => any;
}

export interface AccessDeniedException extends __SmithyException, $MetadataBearer {
    name: "AccessDeniedException";
    $fault: "client";
    
    message?: string;
}
export declare namespace AccessDeniedException {
    
    const filterSensitiveLog: (obj: AccessDeniedException) => any;
}
export declare type OptionState = "Active" | "Processing" | "RequiresIndexDocuments";

export interface OptionStatus {
    
    CreationDate: Date | undefined;
    
    UpdateDate: Date | undefined;
    
    UpdateVersion?: number;
    
    State: OptionState | string | undefined;
    
    PendingDeletion?: boolean;
}
export declare namespace OptionStatus {
    
    const filterSensitiveLog: (obj: OptionStatus) => any;
}

export interface AccessPoliciesStatus {
    
    Options: string | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace AccessPoliciesStatus {
    
    const filterSensitiveLog: (obj: AccessPoliciesStatus) => any;
}

export interface AdditionalLimit {
    
    LimitName?: string;
    
    LimitValues?: string[];
}
export declare namespace AdditionalLimit {
    
    const filterSensitiveLog: (obj: AdditionalLimit) => any;
}

export interface Tag {
    
    Key: string | undefined;
    
    Value: string | undefined;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}

export interface AddTagsRequest {
    
    ARN: string | undefined;
    
    TagList: Tag[] | undefined;
}
export declare namespace AddTagsRequest {
    
    const filterSensitiveLog: (obj: AddTagsRequest) => any;
}

export interface BaseException extends __SmithyException, $MetadataBearer {
    name: "BaseException";
    $fault: "client";
    
    message?: string;
}
export declare namespace BaseException {
    
    const filterSensitiveLog: (obj: BaseException) => any;
}

export interface InternalException extends __SmithyException, $MetadataBearer {
    name: "InternalException";
    $fault: "server";
    
    message?: string;
}
export declare namespace InternalException {
    
    const filterSensitiveLog: (obj: InternalException) => any;
}

export interface ValidationException extends __SmithyException, $MetadataBearer {
    name: "ValidationException";
    $fault: "client";
    
    message?: string;
}
export declare namespace ValidationException {
    
    const filterSensitiveLog: (obj: ValidationException) => any;
}

export interface AdvancedOptionsStatus {
    
    Options: {
        [key: string]: string;
    } | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace AdvancedOptionsStatus {
    
    const filterSensitiveLog: (obj: AdvancedOptionsStatus) => any;
}

export interface SAMLIdp {
    
    MetadataContent: string | undefined;
    
    EntityId: string | undefined;
}
export declare namespace SAMLIdp {
    
    const filterSensitiveLog: (obj: SAMLIdp) => any;
}

export interface SAMLOptionsOutput {
    
    Enabled?: boolean;
    
    Idp?: SAMLIdp;
    
    SubjectKey?: string;
    
    RolesKey?: string;
    
    SessionTimeoutMinutes?: number;
}
export declare namespace SAMLOptionsOutput {
    
    const filterSensitiveLog: (obj: SAMLOptionsOutput) => any;
}

export interface AdvancedSecurityOptions {
    
    Enabled?: boolean;
    
    InternalUserDatabaseEnabled?: boolean;
    
    SAMLOptions?: SAMLOptionsOutput;
}
export declare namespace AdvancedSecurityOptions {
    
    const filterSensitiveLog: (obj: AdvancedSecurityOptions) => any;
}

export interface MasterUserOptions {
    
    MasterUserARN?: string;
    
    MasterUserName?: string;
    
    MasterUserPassword?: string;
}
export declare namespace MasterUserOptions {
    
    const filterSensitiveLog: (obj: MasterUserOptions) => any;
}

export interface SAMLOptionsInput {
    
    Enabled?: boolean;
    
    Idp?: SAMLIdp;
    
    MasterUserName?: string;
    
    MasterBackendRole?: string;
    
    SubjectKey?: string;
    
    RolesKey?: string;
    
    SessionTimeoutMinutes?: number;
}
export declare namespace SAMLOptionsInput {
    
    const filterSensitiveLog: (obj: SAMLOptionsInput) => any;
}

export interface AdvancedSecurityOptionsInput {
    
    Enabled?: boolean;
    
    InternalUserDatabaseEnabled?: boolean;
    
    MasterUserOptions?: MasterUserOptions;
    
    SAMLOptions?: SAMLOptionsInput;
}
export declare namespace AdvancedSecurityOptionsInput {
    
    const filterSensitiveLog: (obj: AdvancedSecurityOptionsInput) => any;
}

export interface AdvancedSecurityOptionsStatus {
    
    Options: AdvancedSecurityOptions | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace AdvancedSecurityOptionsStatus {
    
    const filterSensitiveLog: (obj: AdvancedSecurityOptionsStatus) => any;
}

export interface AssociatePackageRequest {
    
    PackageID: string | undefined;
    
    DomainName: string | undefined;
}
export declare namespace AssociatePackageRequest {
    
    const filterSensitiveLog: (obj: AssociatePackageRequest) => any;
}
export declare type DomainPackageStatus = "ACTIVE" | "ASSOCIATING" | "ASSOCIATION_FAILED" | "DISSOCIATING" | "DISSOCIATION_FAILED";
export interface ErrorDetails {
    ErrorType?: string;
    ErrorMessage?: string;
}
export declare namespace ErrorDetails {
    
    const filterSensitiveLog: (obj: ErrorDetails) => any;
}
export declare type PackageType = "TXT-DICTIONARY";

export interface DomainPackageDetails {
    
    PackageID?: string;
    
    PackageName?: string;
    
    PackageType?: PackageType | string;
    
    LastUpdated?: Date;
    
    DomainName?: string;
    
    DomainPackageStatus?: DomainPackageStatus | string;
    PackageVersion?: string;
    
    ReferencePath?: string;
    
    ErrorDetails?: ErrorDetails;
}
export declare namespace DomainPackageDetails {
    
    const filterSensitiveLog: (obj: DomainPackageDetails) => any;
}

export interface AssociatePackageResponse {
    
    DomainPackageDetails?: DomainPackageDetails;
}
export declare namespace AssociatePackageResponse {
    
    const filterSensitiveLog: (obj: AssociatePackageResponse) => any;
}

export interface ConflictException extends __SmithyException, $MetadataBearer {
    name: "ConflictException";
    $fault: "client";
    
    message?: string;
}
export declare namespace ConflictException {
    
    const filterSensitiveLog: (obj: ConflictException) => any;
}

export interface CancelElasticsearchServiceSoftwareUpdateRequest {
    
    DomainName: string | undefined;
}
export declare namespace CancelElasticsearchServiceSoftwareUpdateRequest {
    
    const filterSensitiveLog: (obj: CancelElasticsearchServiceSoftwareUpdateRequest) => any;
}
export declare type DeploymentStatus = "COMPLETED" | "ELIGIBLE" | "IN_PROGRESS" | "NOT_ELIGIBLE" | "PENDING_UPDATE";

export interface ServiceSoftwareOptions {
    
    CurrentVersion?: string;
    
    NewVersion?: string;
    
    UpdateAvailable?: boolean;
    
    Cancellable?: boolean;
    
    UpdateStatus?: DeploymentStatus | string;
    
    Description?: string;
    
    AutomatedUpdateDate?: Date;
    
    OptionalDeployment?: boolean;
}
export declare namespace ServiceSoftwareOptions {
    
    const filterSensitiveLog: (obj: ServiceSoftwareOptions) => any;
}

export interface CancelElasticsearchServiceSoftwareUpdateResponse {
    
    ServiceSoftwareOptions?: ServiceSoftwareOptions;
}
export declare namespace CancelElasticsearchServiceSoftwareUpdateResponse {
    
    const filterSensitiveLog: (obj: CancelElasticsearchServiceSoftwareUpdateResponse) => any;
}
export declare enum AutoTuneDesiredState {
    DISABLED = "DISABLED",
    ENABLED = "ENABLED"
}
export declare enum TimeUnit {
    HOURS = "HOURS"
}

export interface Duration {
    
    Value?: number;
    
    Unit?: TimeUnit | string;
}
export declare namespace Duration {
    
    const filterSensitiveLog: (obj: Duration) => any;
}

export interface AutoTuneMaintenanceSchedule {
    
    StartAt?: Date;
    
    Duration?: Duration;
    
    CronExpressionForRecurrence?: string;
}
export declare namespace AutoTuneMaintenanceSchedule {
    
    const filterSensitiveLog: (obj: AutoTuneMaintenanceSchedule) => any;
}

export interface AutoTuneOptionsInput {
    
    DesiredState?: AutoTuneDesiredState | string;
    
    MaintenanceSchedules?: AutoTuneMaintenanceSchedule[];
}
export declare namespace AutoTuneOptionsInput {
    
    const filterSensitiveLog: (obj: AutoTuneOptionsInput) => any;
}

export interface CognitoOptions {
    
    Enabled?: boolean;
    
    UserPoolId?: string;
    
    IdentityPoolId?: string;
    
    RoleArn?: string;
}
export declare namespace CognitoOptions {
    
    const filterSensitiveLog: (obj: CognitoOptions) => any;
}
export declare enum TLSSecurityPolicy {
    POLICY_MIN_TLS_1_0_2019_07 = "Policy-Min-TLS-1-0-2019-07",
    POLICY_MIN_TLS_1_2_2019_07 = "Policy-Min-TLS-1-2-2019-07"
}

export interface DomainEndpointOptions {
    
    EnforceHTTPS?: boolean;
    
    TLSSecurityPolicy?: TLSSecurityPolicy | string;
    
    CustomEndpointEnabled?: boolean;
    
    CustomEndpoint?: string;
    
    CustomEndpointCertificateArn?: string;
}
export declare namespace DomainEndpointOptions {
    
    const filterSensitiveLog: (obj: DomainEndpointOptions) => any;
}
export declare type VolumeType = "gp2" | "io1" | "standard";

export interface EBSOptions {
    
    EBSEnabled?: boolean;
    
    VolumeType?: VolumeType | string;
    
    VolumeSize?: number;
    
    Iops?: number;
}
export declare namespace EBSOptions {
    
    const filterSensitiveLog: (obj: EBSOptions) => any;
}

export interface ColdStorageOptions {
    
    Enabled: boolean | undefined;
}
export declare namespace ColdStorageOptions {
    
    const filterSensitiveLog: (obj: ColdStorageOptions) => any;
}
export declare type ESPartitionInstanceType = "c4.2xlarge.elasticsearch" | "c4.4xlarge.elasticsearch" | "c4.8xlarge.elasticsearch" | "c4.large.elasticsearch" | "c4.xlarge.elasticsearch" | "c5.18xlarge.elasticsearch" | "c5.2xlarge.elasticsearch" | "c5.4xlarge.elasticsearch" | "c5.9xlarge.elasticsearch" | "c5.large.elasticsearch" | "c5.xlarge.elasticsearch" | "d2.2xlarge.elasticsearch" | "d2.4xlarge.elasticsearch" | "d2.8xlarge.elasticsearch" | "d2.xlarge.elasticsearch" | "i2.2xlarge.elasticsearch" | "i2.xlarge.elasticsearch" | "i3.16xlarge.elasticsearch" | "i3.2xlarge.elasticsearch" | "i3.4xlarge.elasticsearch" | "i3.8xlarge.elasticsearch" | "i3.large.elasticsearch" | "i3.xlarge.elasticsearch" | "m3.2xlarge.elasticsearch" | "m3.large.elasticsearch" | "m3.medium.elasticsearch" | "m3.xlarge.elasticsearch" | "m4.10xlarge.elasticsearch" | "m4.2xlarge.elasticsearch" | "m4.4xlarge.elasticsearch" | "m4.large.elasticsearch" | "m4.xlarge.elasticsearch" | "m5.12xlarge.elasticsearch" | "m5.2xlarge.elasticsearch" | "m5.4xlarge.elasticsearch" | "m5.large.elasticsearch" | "m5.xlarge.elasticsearch" | "r3.2xlarge.elasticsearch" | "r3.4xlarge.elasticsearch" | "r3.8xlarge.elasticsearch" | "r3.large.elasticsearch" | "r3.xlarge.elasticsearch" | "r4.16xlarge.elasticsearch" | "r4.2xlarge.elasticsearch" | "r4.4xlarge.elasticsearch" | "r4.8xlarge.elasticsearch" | "r4.large.elasticsearch" | "r4.xlarge.elasticsearch" | "r5.12xlarge.elasticsearch" | "r5.2xlarge.elasticsearch" | "r5.4xlarge.elasticsearch" | "r5.large.elasticsearch" | "r5.xlarge.elasticsearch" | "t2.medium.elasticsearch" | "t2.micro.elasticsearch" | "t2.small.elasticsearch" | "ultrawarm1.large.elasticsearch" | "ultrawarm1.medium.elasticsearch";
export declare type ESWarmPartitionInstanceType = "ultrawarm1.large.elasticsearch" | "ultrawarm1.medium.elasticsearch";

export interface ZoneAwarenessConfig {
    
    AvailabilityZoneCount?: number;
}
export declare namespace ZoneAwarenessConfig {
    
    const filterSensitiveLog: (obj: ZoneAwarenessConfig) => any;
}

export interface ElasticsearchClusterConfig {
    
    InstanceType?: ESPartitionInstanceType | string;
    
    InstanceCount?: number;
    
    DedicatedMasterEnabled?: boolean;
    
    ZoneAwarenessEnabled?: boolean;
    
    ZoneAwarenessConfig?: ZoneAwarenessConfig;
    
    DedicatedMasterType?: ESPartitionInstanceType | string;
    
    DedicatedMasterCount?: number;
    
    WarmEnabled?: boolean;
    
    WarmType?: ESWarmPartitionInstanceType | string;
    
    WarmCount?: number;
    
    ColdStorageOptions?: ColdStorageOptions;
}
export declare namespace ElasticsearchClusterConfig {
    
    const filterSensitiveLog: (obj: ElasticsearchClusterConfig) => any;
}

export interface EncryptionAtRestOptions {
    
    Enabled?: boolean;
    
    KmsKeyId?: string;
}
export declare namespace EncryptionAtRestOptions {
    
    const filterSensitiveLog: (obj: EncryptionAtRestOptions) => any;
}
export declare type LogType = "AUDIT_LOGS" | "ES_APPLICATION_LOGS" | "INDEX_SLOW_LOGS" | "SEARCH_SLOW_LOGS";

export interface LogPublishingOption {
    
    CloudWatchLogsLogGroupArn?: string;
    
    Enabled?: boolean;
}
export declare namespace LogPublishingOption {
    
    const filterSensitiveLog: (obj: LogPublishingOption) => any;
}

export interface NodeToNodeEncryptionOptions {
    
    Enabled?: boolean;
}
export declare namespace NodeToNodeEncryptionOptions {
    
    const filterSensitiveLog: (obj: NodeToNodeEncryptionOptions) => any;
}

export interface SnapshotOptions {
    
    AutomatedSnapshotStartHour?: number;
}
export declare namespace SnapshotOptions {
    
    const filterSensitiveLog: (obj: SnapshotOptions) => any;
}

export interface VPCOptions {
    
    SubnetIds?: string[];
    
    SecurityGroupIds?: string[];
}
export declare namespace VPCOptions {
    
    const filterSensitiveLog: (obj: VPCOptions) => any;
}
export interface CreateElasticsearchDomainRequest {
    
    DomainName: string | undefined;
    
    ElasticsearchVersion?: string;
    
    ElasticsearchClusterConfig?: ElasticsearchClusterConfig;
    
    EBSOptions?: EBSOptions;
    
    AccessPolicies?: string;
    
    SnapshotOptions?: SnapshotOptions;
    
    VPCOptions?: VPCOptions;
    
    CognitoOptions?: CognitoOptions;
    
    EncryptionAtRestOptions?: EncryptionAtRestOptions;
    
    NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
    
    AdvancedOptions?: {
        [key: string]: string;
    };
    
    LogPublishingOptions?: {
        [key: string]: LogPublishingOption;
    };
    
    DomainEndpointOptions?: DomainEndpointOptions;
    
    AdvancedSecurityOptions?: AdvancedSecurityOptionsInput;
    
    AutoTuneOptions?: AutoTuneOptionsInput;
    
    TagList?: Tag[];
}
export declare namespace CreateElasticsearchDomainRequest {
    
    const filterSensitiveLog: (obj: CreateElasticsearchDomainRequest) => any;
}
export declare enum AutoTuneState {
    DISABLED = "DISABLED",
    DISABLED_AND_ROLLBACK_COMPLETE = "DISABLED_AND_ROLLBACK_COMPLETE",
    DISABLED_AND_ROLLBACK_ERROR = "DISABLED_AND_ROLLBACK_ERROR",
    DISABLED_AND_ROLLBACK_IN_PROGRESS = "DISABLED_AND_ROLLBACK_IN_PROGRESS",
    DISABLED_AND_ROLLBACK_SCHEDULED = "DISABLED_AND_ROLLBACK_SCHEDULED",
    DISABLE_IN_PROGRESS = "DISABLE_IN_PROGRESS",
    ENABLED = "ENABLED",
    ENABLE_IN_PROGRESS = "ENABLE_IN_PROGRESS",
    ERROR = "ERROR"
}

export interface AutoTuneOptionsOutput {
    
    State?: AutoTuneState | string;
    
    ErrorMessage?: string;
}
export declare namespace AutoTuneOptionsOutput {
    
    const filterSensitiveLog: (obj: AutoTuneOptionsOutput) => any;
}

export interface VPCDerivedInfo {
    
    VPCId?: string;
    
    SubnetIds?: string[];
    
    AvailabilityZones?: string[];
    
    SecurityGroupIds?: string[];
}
export declare namespace VPCDerivedInfo {
    
    const filterSensitiveLog: (obj: VPCDerivedInfo) => any;
}

export interface ElasticsearchDomainStatus {
    
    DomainId: string | undefined;
    
    DomainName: string | undefined;
    
    ARN: string | undefined;
    
    Created?: boolean;
    
    Deleted?: boolean;
    
    Endpoint?: string;
    
    Endpoints?: {
        [key: string]: string;
    };
    
    Processing?: boolean;
    
    UpgradeProcessing?: boolean;
    ElasticsearchVersion?: string;
    
    ElasticsearchClusterConfig: ElasticsearchClusterConfig | undefined;
    
    EBSOptions?: EBSOptions;
    
    AccessPolicies?: string;
    
    SnapshotOptions?: SnapshotOptions;
    
    VPCOptions?: VPCDerivedInfo;
    
    CognitoOptions?: CognitoOptions;
    
    EncryptionAtRestOptions?: EncryptionAtRestOptions;
    
    NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
    
    AdvancedOptions?: {
        [key: string]: string;
    };
    
    LogPublishingOptions?: {
        [key: string]: LogPublishingOption;
    };
    
    ServiceSoftwareOptions?: ServiceSoftwareOptions;
    
    DomainEndpointOptions?: DomainEndpointOptions;
    
    AdvancedSecurityOptions?: AdvancedSecurityOptions;
    
    AutoTuneOptions?: AutoTuneOptionsOutput;
}
export declare namespace ElasticsearchDomainStatus {
    
    const filterSensitiveLog: (obj: ElasticsearchDomainStatus) => any;
}

export interface CreateElasticsearchDomainResponse {
    
    DomainStatus?: ElasticsearchDomainStatus;
}
export declare namespace CreateElasticsearchDomainResponse {
    
    const filterSensitiveLog: (obj: CreateElasticsearchDomainResponse) => any;
}

export interface InvalidTypeException extends __SmithyException, $MetadataBearer {
    name: "InvalidTypeException";
    $fault: "client";
    
    message?: string;
}
export declare namespace InvalidTypeException {
    
    const filterSensitiveLog: (obj: InvalidTypeException) => any;
}

export interface ResourceAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "ResourceAlreadyExistsException";
    $fault: "client";
    
    message?: string;
}
export declare namespace ResourceAlreadyExistsException {
    
    const filterSensitiveLog: (obj: ResourceAlreadyExistsException) => any;
}

export interface CreateOutboundCrossClusterSearchConnectionRequest {
    
    SourceDomainInfo: DomainInformation | undefined;
    
    DestinationDomainInfo: DomainInformation | undefined;
    
    ConnectionAlias: string | undefined;
}
export declare namespace CreateOutboundCrossClusterSearchConnectionRequest {
    
    const filterSensitiveLog: (obj: CreateOutboundCrossClusterSearchConnectionRequest) => any;
}
export declare enum OutboundCrossClusterSearchConnectionStatusCode {
    ACTIVE = "ACTIVE",
    DELETED = "DELETED",
    DELETING = "DELETING",
    PENDING_ACCEPTANCE = "PENDING_ACCEPTANCE",
    PROVISIONING = "PROVISIONING",
    REJECTED = "REJECTED",
    VALIDATING = "VALIDATING",
    VALIDATION_FAILED = "VALIDATION_FAILED"
}

export interface OutboundCrossClusterSearchConnectionStatus {
    
    StatusCode?: OutboundCrossClusterSearchConnectionStatusCode | string;
    
    Message?: string;
}
export declare namespace OutboundCrossClusterSearchConnectionStatus {
    
    const filterSensitiveLog: (obj: OutboundCrossClusterSearchConnectionStatus) => any;
}

export interface CreateOutboundCrossClusterSearchConnectionResponse {
    
    SourceDomainInfo?: DomainInformation;
    
    DestinationDomainInfo?: DomainInformation;
    
    ConnectionAlias?: string;
    
    ConnectionStatus?: OutboundCrossClusterSearchConnectionStatus;
    
    CrossClusterSearchConnectionId?: string;
}
export declare namespace CreateOutboundCrossClusterSearchConnectionResponse {
    
    const filterSensitiveLog: (obj: CreateOutboundCrossClusterSearchConnectionResponse) => any;
}

export interface PackageSource {
    
    S3BucketName?: string;
    
    S3Key?: string;
}
export declare namespace PackageSource {
    
    const filterSensitiveLog: (obj: PackageSource) => any;
}

export interface CreatePackageRequest {
    
    PackageName: string | undefined;
    
    PackageType: PackageType | string | undefined;
    
    PackageDescription?: string;
    
    PackageSource: PackageSource | undefined;
}
export declare namespace CreatePackageRequest {
    
    const filterSensitiveLog: (obj: CreatePackageRequest) => any;
}
export declare type PackageStatus = "AVAILABLE" | "COPYING" | "COPY_FAILED" | "DELETED" | "DELETE_FAILED" | "DELETING" | "VALIDATING" | "VALIDATION_FAILED";

export interface PackageDetails {
    
    PackageID?: string;
    
    PackageName?: string;
    
    PackageType?: PackageType | string;
    
    PackageDescription?: string;
    
    PackageStatus?: PackageStatus | string;
    
    CreatedAt?: Date;
    LastUpdatedAt?: Date;
    AvailablePackageVersion?: string;
    
    ErrorDetails?: ErrorDetails;
}
export declare namespace PackageDetails {
    
    const filterSensitiveLog: (obj: PackageDetails) => any;
}

export interface CreatePackageResponse {
    
    PackageDetails?: PackageDetails;
}
export declare namespace CreatePackageResponse {
    
    const filterSensitiveLog: (obj: CreatePackageResponse) => any;
}

export interface DeleteElasticsearchDomainRequest {
    
    DomainName: string | undefined;
}
export declare namespace DeleteElasticsearchDomainRequest {
    
    const filterSensitiveLog: (obj: DeleteElasticsearchDomainRequest) => any;
}

export interface DeleteElasticsearchDomainResponse {
    
    DomainStatus?: ElasticsearchDomainStatus;
}
export declare namespace DeleteElasticsearchDomainResponse {
    
    const filterSensitiveLog: (obj: DeleteElasticsearchDomainResponse) => any;
}

export interface DeleteInboundCrossClusterSearchConnectionRequest {
    
    CrossClusterSearchConnectionId: string | undefined;
}
export declare namespace DeleteInboundCrossClusterSearchConnectionRequest {
    
    const filterSensitiveLog: (obj: DeleteInboundCrossClusterSearchConnectionRequest) => any;
}

export interface DeleteInboundCrossClusterSearchConnectionResponse {
    
    CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
}
export declare namespace DeleteInboundCrossClusterSearchConnectionResponse {
    
    const filterSensitiveLog: (obj: DeleteInboundCrossClusterSearchConnectionResponse) => any;
}

export interface DeleteOutboundCrossClusterSearchConnectionRequest {
    
    CrossClusterSearchConnectionId: string | undefined;
}
export declare namespace DeleteOutboundCrossClusterSearchConnectionRequest {
    
    const filterSensitiveLog: (obj: DeleteOutboundCrossClusterSearchConnectionRequest) => any;
}

export interface OutboundCrossClusterSearchConnection {
    
    SourceDomainInfo?: DomainInformation;
    
    DestinationDomainInfo?: DomainInformation;
    
    CrossClusterSearchConnectionId?: string;
    
    ConnectionAlias?: string;
    
    ConnectionStatus?: OutboundCrossClusterSearchConnectionStatus;
}
export declare namespace OutboundCrossClusterSearchConnection {
    
    const filterSensitiveLog: (obj: OutboundCrossClusterSearchConnection) => any;
}

export interface DeleteOutboundCrossClusterSearchConnectionResponse {
    
    CrossClusterSearchConnection?: OutboundCrossClusterSearchConnection;
}
export declare namespace DeleteOutboundCrossClusterSearchConnectionResponse {
    
    const filterSensitiveLog: (obj: DeleteOutboundCrossClusterSearchConnectionResponse) => any;
}

export interface DeletePackageRequest {
    
    PackageID: string | undefined;
}
export declare namespace DeletePackageRequest {
    
    const filterSensitiveLog: (obj: DeletePackageRequest) => any;
}

export interface DeletePackageResponse {
    
    PackageDetails?: PackageDetails;
}
export declare namespace DeletePackageResponse {
    
    const filterSensitiveLog: (obj: DeletePackageResponse) => any;
}

export interface DescribeDomainAutoTunesRequest {
    
    DomainName: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace DescribeDomainAutoTunesRequest {
    
    const filterSensitiveLog: (obj: DescribeDomainAutoTunesRequest) => any;
}
export declare enum ScheduledAutoTuneActionType {
    JVM_HEAP_SIZE_TUNING = "JVM_HEAP_SIZE_TUNING",
    JVM_YOUNG_GEN_TUNING = "JVM_YOUNG_GEN_TUNING"
}
export declare enum ScheduledAutoTuneSeverityType {
    HIGH = "HIGH",
    LOW = "LOW",
    MEDIUM = "MEDIUM"
}

export interface ScheduledAutoTuneDetails {
    
    Date?: Date;
    
    ActionType?: ScheduledAutoTuneActionType | string;
    
    Action?: string;
    
    Severity?: ScheduledAutoTuneSeverityType | string;
}
export declare namespace ScheduledAutoTuneDetails {
    
    const filterSensitiveLog: (obj: ScheduledAutoTuneDetails) => any;
}

export interface AutoTuneDetails {
    
    ScheduledAutoTuneDetails?: ScheduledAutoTuneDetails;
}
export declare namespace AutoTuneDetails {
    
    const filterSensitiveLog: (obj: AutoTuneDetails) => any;
}
export declare enum AutoTuneType {
    SCHEDULED_ACTION = "SCHEDULED_ACTION"
}

export interface AutoTune {
    
    AutoTuneType?: AutoTuneType | string;
    
    AutoTuneDetails?: AutoTuneDetails;
}
export declare namespace AutoTune {
    
    const filterSensitiveLog: (obj: AutoTune) => any;
}

export interface DescribeDomainAutoTunesResponse {
    
    AutoTunes?: AutoTune[];
    
    NextToken?: string;
}
export declare namespace DescribeDomainAutoTunesResponse {
    
    const filterSensitiveLog: (obj: DescribeDomainAutoTunesResponse) => any;
}

export interface DescribeElasticsearchDomainRequest {
    
    DomainName: string | undefined;
}
export declare namespace DescribeElasticsearchDomainRequest {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchDomainRequest) => any;
}

export interface DescribeElasticsearchDomainResponse {
    
    DomainStatus: ElasticsearchDomainStatus | undefined;
}
export declare namespace DescribeElasticsearchDomainResponse {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchDomainResponse) => any;
}

export interface DescribeElasticsearchDomainConfigRequest {
    
    DomainName: string | undefined;
}
export declare namespace DescribeElasticsearchDomainConfigRequest {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchDomainConfigRequest) => any;
}
export declare enum RollbackOnDisable {
    DEFAULT_ROLLBACK = "DEFAULT_ROLLBACK",
    NO_ROLLBACK = "NO_ROLLBACK"
}

export interface AutoTuneOptions {
    
    DesiredState?: AutoTuneDesiredState | string;
    
    RollbackOnDisable?: RollbackOnDisable | string;
    
    MaintenanceSchedules?: AutoTuneMaintenanceSchedule[];
}
export declare namespace AutoTuneOptions {
    
    const filterSensitiveLog: (obj: AutoTuneOptions) => any;
}

export interface AutoTuneStatus {
    
    CreationDate: Date | undefined;
    
    UpdateDate: Date | undefined;
    
    UpdateVersion?: number;
    
    State: AutoTuneState | string | undefined;
    
    ErrorMessage?: string;
    
    PendingDeletion?: boolean;
}
export declare namespace AutoTuneStatus {
    
    const filterSensitiveLog: (obj: AutoTuneStatus) => any;
}

export interface AutoTuneOptionsStatus {
    
    Options?: AutoTuneOptions;
    
    Status?: AutoTuneStatus;
}
export declare namespace AutoTuneOptionsStatus {
    
    const filterSensitiveLog: (obj: AutoTuneOptionsStatus) => any;
}

export interface CognitoOptionsStatus {
    
    Options: CognitoOptions | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace CognitoOptionsStatus {
    
    const filterSensitiveLog: (obj: CognitoOptionsStatus) => any;
}

export interface DomainEndpointOptionsStatus {
    
    Options: DomainEndpointOptions | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace DomainEndpointOptionsStatus {
    
    const filterSensitiveLog: (obj: DomainEndpointOptionsStatus) => any;
}

export interface EBSOptionsStatus {
    
    Options: EBSOptions | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace EBSOptionsStatus {
    
    const filterSensitiveLog: (obj: EBSOptionsStatus) => any;
}

export interface ElasticsearchClusterConfigStatus {
    
    Options: ElasticsearchClusterConfig | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace ElasticsearchClusterConfigStatus {
    
    const filterSensitiveLog: (obj: ElasticsearchClusterConfigStatus) => any;
}

export interface ElasticsearchVersionStatus {
    
    Options: string | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace ElasticsearchVersionStatus {
    
    const filterSensitiveLog: (obj: ElasticsearchVersionStatus) => any;
}

export interface EncryptionAtRestOptionsStatus {
    
    Options: EncryptionAtRestOptions | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace EncryptionAtRestOptionsStatus {
    
    const filterSensitiveLog: (obj: EncryptionAtRestOptionsStatus) => any;
}

export interface LogPublishingOptionsStatus {
    
    Options?: {
        [key: string]: LogPublishingOption;
    };
    
    Status?: OptionStatus;
}
export declare namespace LogPublishingOptionsStatus {
    
    const filterSensitiveLog: (obj: LogPublishingOptionsStatus) => any;
}

export interface NodeToNodeEncryptionOptionsStatus {
    
    Options: NodeToNodeEncryptionOptions | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace NodeToNodeEncryptionOptionsStatus {
    
    const filterSensitiveLog: (obj: NodeToNodeEncryptionOptionsStatus) => any;
}

export interface SnapshotOptionsStatus {
    
    Options: SnapshotOptions | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace SnapshotOptionsStatus {
    
    const filterSensitiveLog: (obj: SnapshotOptionsStatus) => any;
}

export interface VPCDerivedInfoStatus {
    
    Options: VPCDerivedInfo | undefined;
    
    Status: OptionStatus | undefined;
}
export declare namespace VPCDerivedInfoStatus {
    
    const filterSensitiveLog: (obj: VPCDerivedInfoStatus) => any;
}

export interface ElasticsearchDomainConfig {
    
    ElasticsearchVersion?: ElasticsearchVersionStatus;
    
    ElasticsearchClusterConfig?: ElasticsearchClusterConfigStatus;
    
    EBSOptions?: EBSOptionsStatus;
    
    AccessPolicies?: AccessPoliciesStatus;
    
    SnapshotOptions?: SnapshotOptionsStatus;
    
    VPCOptions?: VPCDerivedInfoStatus;
    
    CognitoOptions?: CognitoOptionsStatus;
    
    EncryptionAtRestOptions?: EncryptionAtRestOptionsStatus;
    
    NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptionsStatus;
    
    AdvancedOptions?: AdvancedOptionsStatus;
    
    LogPublishingOptions?: LogPublishingOptionsStatus;
    
    DomainEndpointOptions?: DomainEndpointOptionsStatus;
    
    AdvancedSecurityOptions?: AdvancedSecurityOptionsStatus;
    
    AutoTuneOptions?: AutoTuneOptionsStatus;
}
export declare namespace ElasticsearchDomainConfig {
    
    const filterSensitiveLog: (obj: ElasticsearchDomainConfig) => any;
}

export interface DescribeElasticsearchDomainConfigResponse {
    
    DomainConfig: ElasticsearchDomainConfig | undefined;
}
export declare namespace DescribeElasticsearchDomainConfigResponse {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchDomainConfigResponse) => any;
}

export interface DescribeElasticsearchDomainsRequest {
    
    DomainNames: string[] | undefined;
}
export declare namespace DescribeElasticsearchDomainsRequest {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchDomainsRequest) => any;
}

export interface DescribeElasticsearchDomainsResponse {
    
    DomainStatusList: ElasticsearchDomainStatus[] | undefined;
}
export declare namespace DescribeElasticsearchDomainsResponse {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchDomainsResponse) => any;
}

export interface DescribeElasticsearchInstanceTypeLimitsRequest {
    
    DomainName?: string;
    
    InstanceType: ESPartitionInstanceType | string | undefined;
    
    ElasticsearchVersion: string | undefined;
}
export declare namespace DescribeElasticsearchInstanceTypeLimitsRequest {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchInstanceTypeLimitsRequest) => any;
}

export interface InstanceCountLimits {
    
    MinimumInstanceCount?: number;
    
    MaximumInstanceCount?: number;
}
export declare namespace InstanceCountLimits {
    
    const filterSensitiveLog: (obj: InstanceCountLimits) => any;
}

export interface InstanceLimits {
    
    InstanceCountLimits?: InstanceCountLimits;
}
export declare namespace InstanceLimits {
    
    const filterSensitiveLog: (obj: InstanceLimits) => any;
}

export interface StorageTypeLimit {
    
    LimitName?: string;
    
    LimitValues?: string[];
}
export declare namespace StorageTypeLimit {
    
    const filterSensitiveLog: (obj: StorageTypeLimit) => any;
}

export interface StorageType {
    
    StorageTypeName?: string;
    
    StorageSubTypeName?: string;
    
    StorageTypeLimits?: StorageTypeLimit[];
}
export declare namespace StorageType {
    
    const filterSensitiveLog: (obj: StorageType) => any;
}

export interface Limits {
    
    StorageTypes?: StorageType[];
    
    InstanceLimits?: InstanceLimits;
    
    AdditionalLimits?: AdditionalLimit[];
}
export declare namespace Limits {
    
    const filterSensitiveLog: (obj: Limits) => any;
}

export interface DescribeElasticsearchInstanceTypeLimitsResponse {
    
    LimitsByRole?: {
        [key: string]: Limits;
    };
}
export declare namespace DescribeElasticsearchInstanceTypeLimitsResponse {
    
    const filterSensitiveLog: (obj: DescribeElasticsearchInstanceTypeLimitsResponse) => any;
}

export interface Filter {
    
    Name?: string;
    
    Values?: string[];
}
export declare namespace Filter {
    
    const filterSensitiveLog: (obj: Filter) => any;
}

export interface DescribeInboundCrossClusterSearchConnectionsRequest {
    
    Filters?: Filter[];
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace DescribeInboundCrossClusterSearchConnectionsRequest {
    
    const filterSensitiveLog: (obj: DescribeInboundCrossClusterSearchConnectionsRequest) => any;
}

export interface DescribeInboundCrossClusterSearchConnectionsResponse {
    
    CrossClusterSearchConnections?: InboundCrossClusterSearchConnection[];
    
    NextToken?: string;
}
export declare namespace DescribeInboundCrossClusterSearchConnectionsResponse {
    
    const filterSensitiveLog: (obj: DescribeInboundCrossClusterSearchConnectionsResponse) => any;
}

export interface InvalidPaginationTokenException extends __SmithyException, $MetadataBearer {
    name: "InvalidPaginationTokenException";
    $fault: "client";
    
    message?: string;
}
export declare namespace InvalidPaginationTokenException {
    
    const filterSensitiveLog: (obj: InvalidPaginationTokenException) => any;
}

export interface DescribeOutboundCrossClusterSearchConnectionsRequest {
    
    Filters?: Filter[];
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace DescribeOutboundCrossClusterSearchConnectionsRequest {
    
    const filterSensitiveLog: (obj: DescribeOutboundCrossClusterSearchConnectionsRequest) => any;
}

export interface DescribeOutboundCrossClusterSearchConnectionsResponse {
    
    CrossClusterSearchConnections?: OutboundCrossClusterSearchConnection[];
    
    NextToken?: string;
}
export declare namespace DescribeOutboundCrossClusterSearchConnectionsResponse {
    
    const filterSensitiveLog: (obj: DescribeOutboundCrossClusterSearchConnectionsResponse) => any;
}
export declare enum DescribePackagesFilterName {
    PackageID = "PackageID",
    PackageName = "PackageName",
    PackageStatus = "PackageStatus"
}

export interface DescribePackagesFilter {
    
    Name?: DescribePackagesFilterName | string;
    
    Value?: string[];
}
export declare namespace DescribePackagesFilter {
    
    const filterSensitiveLog: (obj: DescribePackagesFilter) => any;
}

export interface DescribePackagesRequest {
    
    Filters?: DescribePackagesFilter[];
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace DescribePackagesRequest {
    
    const filterSensitiveLog: (obj: DescribePackagesRequest) => any;
}

export interface DescribePackagesResponse {
    
    PackageDetailsList?: PackageDetails[];
    NextToken?: string;
}
export declare namespace DescribePackagesResponse {
    
    const filterSensitiveLog: (obj: DescribePackagesResponse) => any;
}

export interface DescribeReservedElasticsearchInstanceOfferingsRequest {
    
    ReservedElasticsearchInstanceOfferingId?: string;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace DescribeReservedElasticsearchInstanceOfferingsRequest {
    
    const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstanceOfferingsRequest) => any;
}
export declare type ReservedElasticsearchInstancePaymentOption = "ALL_UPFRONT" | "NO_UPFRONT" | "PARTIAL_UPFRONT";

export interface RecurringCharge {
    
    RecurringChargeAmount?: number;
    
    RecurringChargeFrequency?: string;
}
export declare namespace RecurringCharge {
    
    const filterSensitiveLog: (obj: RecurringCharge) => any;
}

export interface ReservedElasticsearchInstanceOffering {
    
    ReservedElasticsearchInstanceOfferingId?: string;
    
    ElasticsearchInstanceType?: ESPartitionInstanceType | string;
    
    Duration?: number;
    
    FixedPrice?: number;
    
    UsagePrice?: number;
    
    CurrencyCode?: string;
    
    PaymentOption?: ReservedElasticsearchInstancePaymentOption | string;
    
    RecurringCharges?: RecurringCharge[];
}
export declare namespace ReservedElasticsearchInstanceOffering {
    
    const filterSensitiveLog: (obj: ReservedElasticsearchInstanceOffering) => any;
}

export interface DescribeReservedElasticsearchInstanceOfferingsResponse {
    
    NextToken?: string;
    
    ReservedElasticsearchInstanceOfferings?: ReservedElasticsearchInstanceOffering[];
}
export declare namespace DescribeReservedElasticsearchInstanceOfferingsResponse {
    
    const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstanceOfferingsResponse) => any;
}

export interface DescribeReservedElasticsearchInstancesRequest {
    
    ReservedElasticsearchInstanceId?: string;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace DescribeReservedElasticsearchInstancesRequest {
    
    const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstancesRequest) => any;
}

export interface ReservedElasticsearchInstance {
    
    ReservationName?: string;
    
    ReservedElasticsearchInstanceId?: string;
    
    ReservedElasticsearchInstanceOfferingId?: string;
    
    ElasticsearchInstanceType?: ESPartitionInstanceType | string;
    
    StartTime?: Date;
    
    Duration?: number;
    
    FixedPrice?: number;
    
    UsagePrice?: number;
    
    CurrencyCode?: string;
    
    ElasticsearchInstanceCount?: number;
    
    State?: string;
    
    PaymentOption?: ReservedElasticsearchInstancePaymentOption | string;
    
    RecurringCharges?: RecurringCharge[];
}
export declare namespace ReservedElasticsearchInstance {
    
    const filterSensitiveLog: (obj: ReservedElasticsearchInstance) => any;
}

export interface DescribeReservedElasticsearchInstancesResponse {
    
    NextToken?: string;
    
    ReservedElasticsearchInstances?: ReservedElasticsearchInstance[];
}
export declare namespace DescribeReservedElasticsearchInstancesResponse {
    
    const filterSensitiveLog: (obj: DescribeReservedElasticsearchInstancesResponse) => any;
}

export interface DissociatePackageRequest {
    
    PackageID: string | undefined;
    
    DomainName: string | undefined;
}
export declare namespace DissociatePackageRequest {
    
    const filterSensitiveLog: (obj: DissociatePackageRequest) => any;
}

export interface DissociatePackageResponse {
    
    DomainPackageDetails?: DomainPackageDetails;
}
export declare namespace DissociatePackageResponse {
    
    const filterSensitiveLog: (obj: DissociatePackageResponse) => any;
}

export interface GetCompatibleElasticsearchVersionsRequest {
    
    DomainName?: string;
}
export declare namespace GetCompatibleElasticsearchVersionsRequest {
    
    const filterSensitiveLog: (obj: GetCompatibleElasticsearchVersionsRequest) => any;
}

export interface CompatibleVersionsMap {
    
    SourceVersion?: string;
    
    TargetVersions?: string[];
}
export declare namespace CompatibleVersionsMap {
    
    const filterSensitiveLog: (obj: CompatibleVersionsMap) => any;
}

export interface GetCompatibleElasticsearchVersionsResponse {
    
    CompatibleElasticsearchVersions?: CompatibleVersionsMap[];
}
export declare namespace GetCompatibleElasticsearchVersionsResponse {
    
    const filterSensitiveLog: (obj: GetCompatibleElasticsearchVersionsResponse) => any;
}

export interface GetPackageVersionHistoryRequest {
    
    PackageID: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace GetPackageVersionHistoryRequest {
    
    const filterSensitiveLog: (obj: GetPackageVersionHistoryRequest) => any;
}

export interface PackageVersionHistory {
    
    PackageVersion?: string;
    
    CommitMessage?: string;
    
    CreatedAt?: Date;
}
export declare namespace PackageVersionHistory {
    
    const filterSensitiveLog: (obj: PackageVersionHistory) => any;
}

export interface GetPackageVersionHistoryResponse {
    PackageID?: string;
    
    PackageVersionHistoryList?: PackageVersionHistory[];
    NextToken?: string;
}
export declare namespace GetPackageVersionHistoryResponse {
    
    const filterSensitiveLog: (obj: GetPackageVersionHistoryResponse) => any;
}

export interface GetUpgradeHistoryRequest {
    
    DomainName: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace GetUpgradeHistoryRequest {
    
    const filterSensitiveLog: (obj: GetUpgradeHistoryRequest) => any;
}
export declare type UpgradeStep = "PRE_UPGRADE_CHECK" | "SNAPSHOT" | "UPGRADE";
export declare type UpgradeStatus = "FAILED" | "IN_PROGRESS" | "SUCCEEDED" | "SUCCEEDED_WITH_ISSUES";

export interface UpgradeStepItem {
    
    UpgradeStep?: UpgradeStep | string;
    
    UpgradeStepStatus?: UpgradeStatus | string;
    
    Issues?: string[];
    
    ProgressPercent?: number;
}
export declare namespace UpgradeStepItem {
    
    const filterSensitiveLog: (obj: UpgradeStepItem) => any;
}

export interface UpgradeHistory {
    
    UpgradeName?: string;
    
    StartTimestamp?: Date;
    
    UpgradeStatus?: UpgradeStatus | string;
    
    StepsList?: UpgradeStepItem[];
}
export declare namespace UpgradeHistory {
    
    const filterSensitiveLog: (obj: UpgradeHistory) => any;
}

export interface GetUpgradeHistoryResponse {
    
    UpgradeHistories?: UpgradeHistory[];
    
    NextToken?: string;
}
export declare namespace GetUpgradeHistoryResponse {
    
    const filterSensitiveLog: (obj: GetUpgradeHistoryResponse) => any;
}

export interface GetUpgradeStatusRequest {
    
    DomainName: string | undefined;
}
export declare namespace GetUpgradeStatusRequest {
    
    const filterSensitiveLog: (obj: GetUpgradeStatusRequest) => any;
}

export interface GetUpgradeStatusResponse {
    
    UpgradeStep?: UpgradeStep | string;
    
    StepStatus?: UpgradeStatus | string;
    
    UpgradeName?: string;
}
export declare namespace GetUpgradeStatusResponse {
    
    const filterSensitiveLog: (obj: GetUpgradeStatusResponse) => any;
}
export declare enum EngineType {
    Elasticsearch = "Elasticsearch",
    OpenSearch = "OpenSearch"
}

export interface ListDomainNamesRequest {
    
    EngineType?: EngineType | string;
}
export declare namespace ListDomainNamesRequest {
    
    const filterSensitiveLog: (obj: ListDomainNamesRequest) => any;
}
export interface DomainInfo {
    
    DomainName?: string;
    
    EngineType?: EngineType | string;
}
export declare namespace DomainInfo {
    
    const filterSensitiveLog: (obj: DomainInfo) => any;
}

export interface ListDomainNamesResponse {
    
    DomainNames?: DomainInfo[];
}
export declare namespace ListDomainNamesResponse {
    
    const filterSensitiveLog: (obj: ListDomainNamesResponse) => any;
}

export interface ListDomainsForPackageRequest {
    
    PackageID: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListDomainsForPackageRequest {
    
    const filterSensitiveLog: (obj: ListDomainsForPackageRequest) => any;
}

export interface ListDomainsForPackageResponse {
    
    DomainPackageDetailsList?: DomainPackageDetails[];
    NextToken?: string;
}
export declare namespace ListDomainsForPackageResponse {
    
    const filterSensitiveLog: (obj: ListDomainsForPackageResponse) => any;
}

export interface ListElasticsearchInstanceTypesRequest {
    
    ElasticsearchVersion: string | undefined;
    
    DomainName?: string;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListElasticsearchInstanceTypesRequest {
    
    const filterSensitiveLog: (obj: ListElasticsearchInstanceTypesRequest) => any;
}

export interface ListElasticsearchInstanceTypesResponse {
    
    ElasticsearchInstanceTypes?: (ESPartitionInstanceType | string)[];
    
    NextToken?: string;
}
export declare namespace ListElasticsearchInstanceTypesResponse {
    
    const filterSensitiveLog: (obj: ListElasticsearchInstanceTypesResponse) => any;
}

export interface ListElasticsearchVersionsRequest {
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListElasticsearchVersionsRequest {
    
    const filterSensitiveLog: (obj: ListElasticsearchVersionsRequest) => any;
}

export interface ListElasticsearchVersionsResponse {
    
    ElasticsearchVersions?: string[];
    
    NextToken?: string;
}
export declare namespace ListElasticsearchVersionsResponse {
    
    const filterSensitiveLog: (obj: ListElasticsearchVersionsResponse) => any;
}

export interface ListPackagesForDomainRequest {
    
    DomainName: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace ListPackagesForDomainRequest {
    
    const filterSensitiveLog: (obj: ListPackagesForDomainRequest) => any;
}

export interface ListPackagesForDomainResponse {
    
    DomainPackageDetailsList?: DomainPackageDetails[];
    
    NextToken?: string;
}
export declare namespace ListPackagesForDomainResponse {
    
    const filterSensitiveLog: (obj: ListPackagesForDomainResponse) => any;
}

export interface ListTagsRequest {
    
    ARN: string | undefined;
}
export declare namespace ListTagsRequest {
    
    const filterSensitiveLog: (obj: ListTagsRequest) => any;
}

export interface ListTagsResponse {
    
    TagList?: Tag[];
}
export declare namespace ListTagsResponse {
    
    const filterSensitiveLog: (obj: ListTagsResponse) => any;
}

export interface PurchaseReservedElasticsearchInstanceOfferingRequest {
    
    ReservedElasticsearchInstanceOfferingId: string | undefined;
    
    ReservationName: string | undefined;
    
    InstanceCount?: number;
}
export declare namespace PurchaseReservedElasticsearchInstanceOfferingRequest {
    
    const filterSensitiveLog: (obj: PurchaseReservedElasticsearchInstanceOfferingRequest) => any;
}

export interface PurchaseReservedElasticsearchInstanceOfferingResponse {
    
    ReservedElasticsearchInstanceId?: string;
    
    ReservationName?: string;
}
export declare namespace PurchaseReservedElasticsearchInstanceOfferingResponse {
    
    const filterSensitiveLog: (obj: PurchaseReservedElasticsearchInstanceOfferingResponse) => any;
}

export interface RejectInboundCrossClusterSearchConnectionRequest {
    
    CrossClusterSearchConnectionId: string | undefined;
}
export declare namespace RejectInboundCrossClusterSearchConnectionRequest {
    
    const filterSensitiveLog: (obj: RejectInboundCrossClusterSearchConnectionRequest) => any;
}

export interface RejectInboundCrossClusterSearchConnectionResponse {
    
    CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
}
export declare namespace RejectInboundCrossClusterSearchConnectionResponse {
    
    const filterSensitiveLog: (obj: RejectInboundCrossClusterSearchConnectionResponse) => any;
}

export interface RemoveTagsRequest {
    
    ARN: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace RemoveTagsRequest {
    
    const filterSensitiveLog: (obj: RemoveTagsRequest) => any;
}

export interface StartElasticsearchServiceSoftwareUpdateRequest {
    
    DomainName: string | undefined;
}
export declare namespace StartElasticsearchServiceSoftwareUpdateRequest {
    
    const filterSensitiveLog: (obj: StartElasticsearchServiceSoftwareUpdateRequest) => any;
}

export interface StartElasticsearchServiceSoftwareUpdateResponse {
    
    ServiceSoftwareOptions?: ServiceSoftwareOptions;
}
export declare namespace StartElasticsearchServiceSoftwareUpdateResponse {
    
    const filterSensitiveLog: (obj: StartElasticsearchServiceSoftwareUpdateResponse) => any;
}

export interface UpdateElasticsearchDomainConfigRequest {
    
    DomainName: string | undefined;
    
    ElasticsearchClusterConfig?: ElasticsearchClusterConfig;
    
    EBSOptions?: EBSOptions;
    
    SnapshotOptions?: SnapshotOptions;
    
    VPCOptions?: VPCOptions;
    
    CognitoOptions?: CognitoOptions;
    
    AdvancedOptions?: {
        [key: string]: string;
    };
    
    AccessPolicies?: string;
    
    LogPublishingOptions?: {
        [key: string]: LogPublishingOption;
    };
    
    DomainEndpointOptions?: DomainEndpointOptions;
    
    AdvancedSecurityOptions?: AdvancedSecurityOptionsInput;
    
    NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
    
    EncryptionAtRestOptions?: EncryptionAtRestOptions;
    
    AutoTuneOptions?: AutoTuneOptions;
    
    DryRun?: boolean;
}
export declare namespace UpdateElasticsearchDomainConfigRequest {
    
    const filterSensitiveLog: (obj: UpdateElasticsearchDomainConfigRequest) => any;
}
export interface DryRunResults {
    
    DeploymentType?: string;
    
    Message?: string;
}
export declare namespace DryRunResults {
    
    const filterSensitiveLog: (obj: DryRunResults) => any;
}

export interface UpdateElasticsearchDomainConfigResponse {
    
    DomainConfig: ElasticsearchDomainConfig | undefined;
    
    DryRunResults?: DryRunResults;
}
export declare namespace UpdateElasticsearchDomainConfigResponse {
    
    const filterSensitiveLog: (obj: UpdateElasticsearchDomainConfigResponse) => any;
}

export interface UpdatePackageRequest {
    
    PackageID: string | undefined;
    
    PackageSource: PackageSource | undefined;
    
    PackageDescription?: string;
    
    CommitMessage?: string;
}
export declare namespace UpdatePackageRequest {
    
    const filterSensitiveLog: (obj: UpdatePackageRequest) => any;
}

export interface UpdatePackageResponse {
    
    PackageDetails?: PackageDetails;
}
export declare namespace UpdatePackageResponse {
    
    const filterSensitiveLog: (obj: UpdatePackageResponse) => any;
}

export interface UpgradeElasticsearchDomainRequest {
    
    DomainName: string | undefined;
    
    TargetVersion: string | undefined;
    
    PerformCheckOnly?: boolean;
}
export declare namespace UpgradeElasticsearchDomainRequest {
    
    const filterSensitiveLog: (obj: UpgradeElasticsearchDomainRequest) => any;
}

export interface UpgradeElasticsearchDomainResponse {
    
    DomainName?: string;
    
    TargetVersion?: string;
    
    PerformCheckOnly?: boolean;
}
export declare namespace UpgradeElasticsearchDomainResponse {
    
    const filterSensitiveLog: (obj: UpgradeElasticsearchDomainResponse) => any;
}
